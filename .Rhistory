ggplot(sekolah_per_provinsi_2023, aes(x = Sekolah_2023, y = reorder(Provinsi, Sekolah_2023))) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Jumlah Sekolah di Setiap Provinsi (Tahun 2023)", x = "Jumlah Sekolah", y = "Provinsi") +
theme_minimal()
# Distribusi jumlah guru
library(ggplot2)
# Boxplot melihat distribusi jumlah guru setiap provinsi
ggplot(sekolah_data, aes(x = Provinsi, y = `Kepala.Sekolah.&.Guru`, fill = Provinsi)) +
geom_boxplot() +
coord_flip() +  # Memutar sumbu untuk visibilitas lebih baik
labs(title = "Distribusi Jumlah Guru di Setiap Provinsi", x = "Provinsi", y = "Jumlah Guru") +
theme_minimal() +
theme(legend.position = "none")
# Menambahkan kolom Rasio Guru-Siswa
sekolah_data <- sekolah_data %>%
mutate(Rasio.Guru.Siswa = Siswa / `Kepala.Sekolah.&.Guru`)  # Rasio siswa per guru
# Kategorisasi Rasio Guru-Siswa
sekolah_data$Kategori <- ifelse(
sekolah_data$Rasio.Guru.Siswa > 30, "Over",      # Rasio > 1:30
ifelse(sekolah_data$Rasio.Guru.Siswa >= 20, "Fit", # 1:20 ≤ Rasio ≤ 1:30
"Under")                                   # Rasio < 1:20
)
# Ringkasan rasio guru-siswa
summary(sekolah_data$Rasio.Guru.Siswa)
# Visualisasi rasio guru-siswa per provinsi dengan boxplot
ggplot(sekolah_data, aes(x = Provinsi, y = Rasio.Guru.Siswa, fill = Provinsi)) +
geom_boxplot() +
coord_flip() +  # Agar provinsi ditampilkan secara horizontal
labs(title = "Distribusi Rasio Guru-Siswa di Setiap Provinsi", x = "Provinsi", y = "Rasio Guru-Siswa") +
theme_minimal() +
theme(legend.position = "none")
# Visualisasi siswa mengulang
ggplot(sekolah_data, aes(x = Status, y = Mengulang, fill = Status)) +
geom_boxplot() +
labs(title = "Distribusi Siswa Mengulang Berdasarkan Status Sekolah", x = "Status Sekolah", y = "Jumlah Siswa Mengulang") +
theme_minimal()
# Visualisasi siswa putus sekolah
ggplot(sekolah_data, aes(x = Status, y = `Putus.Sekolah`, fill = Status)) +
geom_boxplot() +
labs(title = "Distribusi Siswa Putus Sekolah Berdasarkan Status Sekolah", x = "Status Sekolah", y = "Jumlah Siswa Putus Sekolah") +
theme_minimal()
# Rata-rata rasio guru-siswa per provinsi
avg_rasio <- sekolah_data %>%
group_by(Provinsi) %>%
summarise(Rata_Rasio = mean(Rasio.Guru.Siswa, na.rm = TRUE)) %>%
arrange(desc(Rata_Rasio))
# Visualisasi rata-rata
ggplot(avg_rasio, aes(x = reorder(Provinsi, Rata_Rasio), y = Rata_Rasio)) +
geom_bar(stat = "identity", fill = "dodgerblue") +
coord_flip() +
labs(title = "Rata-Rata Rasio Guru-Siswa Berdasarkan Provinsi", x = "Provinsi", y = "Rata-Rata Rasio Guru-Siswa")
# Scatter plot hubungan rombel dan ruang kelas
ggplot(sekolah_data, aes(x = Rombel, y = `Ruang.Kelas`)) +
geom_point(color = "darkgreen") +
geom_smooth(method = "lm", color = "blue", se = FALSE) +
labs(title = "Hubungan Antara Jumlah Rombel dan Ruang Kelas", x = "Jumlah Rombel", y = "Jumlah Ruang Kelas") +
theme_minimal()
# Distribusi status sekolah
distribusi_status <- sekolah_data %>%
group_by(Provinsi, Status) %>%
summarise(Jumlah = n())
# Visualisasi distribusi status sekolah
ggplot(distribusi_status, aes(x = reorder(Provinsi, -Jumlah), y = Jumlah, fill = Status)) +
geom_bar(stat = "identity", position = "dodge") +
coord_flip() +
labs(title = "Distribusi Status Sekolah Berdasarkan Provinsi", x = "Provinsi", y = "Jumlah Sekolah") +
theme_minimal()
# Daftar pasangan nama kolom lama dan baru
new_colnames <- c("Provinsi" = "provinsi",
"Sekolah" = "sekolah",
"Siswa" = "siswa",
"Mengulang" = "mengulang",
"Putus.Sekolah" = "putus_sekolah",
"Kepala.Sekolah.&.Guru" = "kepsek_dan_guru",
"Tenaga.Kependidikan" = "tendik",
"Rombel" = "rombongan_belajar",
"Ruang.Kelas" = "ruang_kelas",
"Status" = "status",
"Tahun" = "tahun",
"Rasio.Guru.Siswa" = "rasio_guru_siswa",
"Kategori" = "kategori"
)
# Mengganti nama kolom
colnames(sekolah_data) = new_colnames[colnames(sekolah_data)]
head(sekolah_data)
# Mengecek apakah ada data duplikat
duplikat = sum(duplicated(sekolah_data))
cat("Jumlah data duplikat : ", sum(duplikat), "\n")
# Menghapus data duplikat
data = sekolah_data[!duplikat,]
cat("Data seteleah menghapus duplikat: ", nrow(data), "baris\n\n")
# Mengecek data hilang
data_hilang = colSums(is.na(sekolah_data))
cat("Jumlah data hilang disetiap kolom : \n")
print(data_hilang)
# Menghapus baris dengan data hilang
data = na.omit(sekolah_data)
cat("Data setelah menghapus data hilang:", nrow(data), "baris\n\n")
# Spliting data
set.seed(420)
split = initial_split(data, prop = 0.8, strata = kategori) #di split 80% data training dan 20% data testing
data_train = split %>% training()
data_test = split %>% testing()
model = multinom(
kategori ~ siswa + sekolah + kepsek_dan_guru + tendik +
rombongan_belajar + ruang_kelas + status,
data = data_train,
maxit = 8
)
# Import library evaluasi
library(Metrics)
# Menambahkan prediksi ke dataset uji
data_test <- data_test %>%
mutate(predicted_category = predict(model, ., type = "class"))
# Visualisasi distribusi prediksi
ggplot(data_test, aes(x = predicted_category, fill = predicted_category)) +
geom_bar() +
labs(title = "Distribusi Prediksi Kategori Rasio Guru-Siswa",
x = "Kategori Prediksi",
y = "Jumlah",
fill = "Kategori") +
theme_minimal()
# Import library untuk Decision Tree
library(rpart)
library(rpart.plot)
# Pastikan target variable adalah faktor
data_train <- data_train %>%
mutate(kategori_provinsi = factor(kategori))
# Membuat model Decision Tree
dt_model <- rpart(kategori_provinsi ~ siswa + sekolah + kepsek_dan_guru + tendik +
rombongan_belajar + ruang_kelas + status,
data = data_train, method = "class")
# Visualisasi Decision Tree
rpart.plot(dt_model, type = 4, extra = 101, main = "Decision Tree untuk Kategori Provinsi")
# Visualisasi hasil prediksi
ggplot(data_test, aes(x = rasio_guru_siswa, fill = pred_dt)) +
geom_histogram(binwidth = 1, position = "dodge") +
labs(title = "Distribusi Prediksi Rasio Guru-Siswa dengan Decision Tree",
x = "Rasio Guru-Siswa", y = "Frekuensi") +
theme_minimal()
View(data_test)
# Import library untuk Decision Tree
library(rpart)
library(rpart.plot)
# Pastikan target variable adalah faktor
data_train <- data_train %>%
mutate(kategori_provinsi = factor(kategori))
# Membuat model Decision Tree
dt_model <- rpart(kategori_provinsi ~ siswa + sekolah + kepsek_dan_guru + tendik +
rombongan_belajar + ruang_kelas + status,
data = data_train, method = "class")
# Visualisasi Decision Tree
rpart.plot(dt_model, type = 4, extra = 101, main = "Decision Tree untuk Kategori Provinsi")
# Visualisasi hasil prediksi
ggplot(data_test, aes(x = rasio_guru_siswa, fill = predicted_category)) +
geom_histogram(binwidth = 1, position = "dodge") +
labs(title = "Distribusi Prediksi Rasio Guru-Siswa dengan Decision Tree",
x = "Rasio Guru-Siswa", y = "Frekuensi") +
theme_minimal()
# Melakukan testing pada Multinom Regression
predictions = predict(model, data_test)
# Melakukan evaluasi
conf_matrix = confusionMatrix(
as.factor(predictions), as.factor(data_test$kategori)
)
conf_matrix
# Melakukan testing pada Decision Tree
# Prediksi pada data uji
data_test <- data_test %>%
mutate(kategori_provinsi = factor(kategori))
# Prediksi pada data uji
pred_dt <- predict(dt_model, data_test, type = "class")
# Melakukan evaluasi
conf_matrix = confusionMatrix(
as.factor(pred_dt), as.factor(data_test$kategori_provinsi)
)
conf_matrix
# Melakukan testing pada Multinom Regression
predictions = predict(model, data_test)
# Melakukan evaluasi
conf_matrix = confusionMatrix(
as.factor(predictions), as.factor(data_test$kategori)
)
conf_matrix
# Melakukan testing pada Decision Tree
# Prediksi pada data uji
data_test <- data_test %>%
mutate(kategori_provinsi = factor(kategori))
# Prediksi pada data uji
pred_dt <- predict(dt_model, data_test, type = "class")
# Melakukan evaluasi
conf_matrix = confusionMatrix(
as.factor(pred_dt), as.factor(data_test$kategori_provinsi)
)
conf_matrix
# Menambahkan prediksi dari model Decision Tree ke data uji
data_test <- data_test %>%
mutate(pred_dt = predict(dt_model, ., type = "class"))
# Visualisasi perbandingan distribusi prediksi kedua model
ggplot(data_test, aes(x = predicted_category, fill = "Multinomial Regression")) +
geom_bar(alpha = 0.6, position = "dodge") +
geom_bar(aes(x = pred_dt, fill = "Decision Tree"), alpha = 0.6, position = "dodge") +
labs(title = "Perbandingan Distribusi Prediksi Kategori",
x = "Kategori Prediksi",
y = "Jumlah",
fill = "Model") +
theme_minimal()
#----------------------------------------------------------------------------------------------------#
### Opsi Visualisasi dengan headmap
#----------------------------------------------------------------------------------------------------#
# Membuat confusion matrix
conf_matrix_multinom <- table(Predicted = data_test$predicted_category, Actual = data_test$kategori)
conf_matrix_dt <- table(Predicted = data_test$pred_dt, Actual = data_test$kategori)
# Heatmap untuk Multinomial Regression
heatmap_multinom <- as.data.frame(as.table(conf_matrix_multinom))
ggplot(heatmap_multinom, aes(x = Actual, y = Predicted, fill = Freq)) +
geom_tile() +
geom_text(aes(label = Freq), color = "white") +
scale_fill_gradient(low = "blue", high = "red") +
labs(title = "Heatmap Confusion Matrix (Multinomial Regression)",
x = "Kategori Aktual", y = "Kategori Prediksi") +
theme_minimal()
# Heatmap untuk Decision Tree
heatmap_dt <- as.data.frame(as.table(conf_matrix_dt))
ggplot(heatmap_dt, aes(x = Actual, y = Predicted, fill = Freq)) +
geom_tile() +
geom_text(aes(label = Freq), color = "white") +
scale_fill_gradient(low = "blue", high = "red") +
labs(title = "Heatmap Confusion Matrix (Decision Tree)",
x = "Kategori Aktual", y = "Kategori Prediksi") +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
# Import Library
library(dslabs)
library(tidyverse)
library(tidymodels)
library(caret)
library(dplyr)
library(ggplot2)
library(tidyr)
library(nnet)
# Membaca file dataset
library(openxlsx)  # atau library(xlsx)
data2021 = read.xlsx("Dataset/keadaanSekolahDasarProv_2021.xlsx")
data2022 = read.xlsx("Dataset/keadaanSekolahDasarProv_2022.xlsx")
data2023 = read.xlsx("Dataset/keadaanSekolahDasarProv_2023.xlsx")
data2021 = data2021 %>% mutate(Tahun = "2021")
data2022 = data2022 %>% mutate(Tahun = "2022")
data2023 = data2023 %>% mutate(Tahun = "2023")
# Gabungkan ke-3 dataset
sekolah_data = bind_rows(data2021, data2022, data2023)
sekolah_data = sekolah_data %>% arrange(Provinsi, Tahun)
# menampilkan data gabungan
head(sekolah_data)
# Melihat struktur data
str(sekolah_data)
cat("\n")
# Ringkasan data
summary(sekolah_data)
# Memfilter data untuk tahun 2023
sekolah_2023 <- sekolah_data %>%
filter(Tahun == 2023)
# Menghitung jumlah sekolah per provinsi untuk tahun 2023 (Negeri + Swasta)
sekolah_per_provinsi_2023 <- sekolah_2023 %>%
group_by(Provinsi) %>%
summarise(Sekolah_2023 = sum(Sekolah))
# Membuat visualisasi dengan sumbu X adalah angka (Jumlah Sekolah)
ggplot(sekolah_per_provinsi_2023, aes(x = Sekolah_2023, y = reorder(Provinsi, Sekolah_2023))) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Jumlah Sekolah di Setiap Provinsi (Tahun 2023)", x = "Jumlah Sekolah", y = "Provinsi") +
theme_minimal()
# Distribusi jumlah guru
library(ggplot2)
# Boxplot melihat distribusi jumlah guru setiap provinsi
ggplot(sekolah_data, aes(x = Provinsi, y = `Kepala.Sekolah.&.Guru`, fill = Provinsi)) +
geom_boxplot() +
coord_flip() +  # Memutar sumbu untuk visibilitas lebih baik
labs(title = "Distribusi Jumlah Guru di Setiap Provinsi", x = "Provinsi", y = "Jumlah Guru") +
theme_minimal() +
theme(legend.position = "none")
# Menambahkan kolom Rasio Guru-Siswa
sekolah_data <- sekolah_data %>%
mutate(Rasio.Guru.Siswa = Siswa / `Kepala.Sekolah.&.Guru`)  # Rasio siswa per guru
# Kategorisasi Rasio Guru-Siswa
sekolah_data$Kategori <- ifelse(
sekolah_data$Rasio.Guru.Siswa > 30, "Over",      # Rasio > 1:30
ifelse(sekolah_data$Rasio.Guru.Siswa >= 20, "Fit", # 1:20 ≤ Rasio ≤ 1:30
"Under")                                   # Rasio < 1:20
)
# Ringkasan rasio guru-siswa
summary(sekolah_data$Rasio.Guru.Siswa)
# Visualisasi rasio guru-siswa per provinsi dengan boxplot
ggplot(sekolah_data, aes(x = Provinsi, y = Rasio.Guru.Siswa, fill = Provinsi)) +
geom_boxplot() +
coord_flip() +  # Agar provinsi ditampilkan secara horizontal
labs(title = "Distribusi Rasio Guru-Siswa di Setiap Provinsi", x = "Provinsi", y = "Rasio Guru-Siswa") +
theme_minimal() +
theme(legend.position = "none")
# Visualisasi siswa mengulang
ggplot(sekolah_data, aes(x = Status, y = Mengulang, fill = Status)) +
geom_boxplot() +
labs(title = "Distribusi Siswa Mengulang Berdasarkan Status Sekolah", x = "Status Sekolah", y = "Jumlah Siswa Mengulang") +
theme_minimal()
# Visualisasi siswa putus sekolah
ggplot(sekolah_data, aes(x = Status, y = `Putus.Sekolah`, fill = Status)) +
geom_boxplot() +
labs(title = "Distribusi Siswa Putus Sekolah Berdasarkan Status Sekolah", x = "Status Sekolah", y = "Jumlah Siswa Putus Sekolah") +
theme_minimal()
# Rata-rata rasio guru-siswa per provinsi
avg_rasio <- sekolah_data %>%
group_by(Provinsi) %>%
summarise(Rata_Rasio = mean(Rasio.Guru.Siswa, na.rm = TRUE)) %>%
arrange(desc(Rata_Rasio))
# Visualisasi rata-rata
ggplot(avg_rasio, aes(x = reorder(Provinsi, Rata_Rasio), y = Rata_Rasio)) +
geom_bar(stat = "identity", fill = "dodgerblue") +
coord_flip() +
labs(title = "Rata-Rata Rasio Guru-Siswa Berdasarkan Provinsi", x = "Provinsi", y = "Rata-Rata Rasio Guru-Siswa")
# Scatter plot hubungan rombel dan ruang kelas
ggplot(sekolah_data, aes(x = Rombel, y = `Ruang.Kelas`)) +
geom_point(color = "darkgreen") +
geom_smooth(method = "lm", color = "blue", se = FALSE) +
labs(title = "Hubungan Antara Jumlah Rombel dan Ruang Kelas", x = "Jumlah Rombel", y = "Jumlah Ruang Kelas") +
theme_minimal()
# Distribusi status sekolah
distribusi_status <- sekolah_data %>%
group_by(Provinsi, Status) %>%
summarise(Jumlah = n())
# Visualisasi distribusi status sekolah
ggplot(distribusi_status, aes(x = reorder(Provinsi, -Jumlah), y = Jumlah, fill = Status)) +
geom_bar(stat = "identity", position = "dodge") +
coord_flip() +
labs(title = "Distribusi Status Sekolah Berdasarkan Provinsi", x = "Provinsi", y = "Jumlah Sekolah") +
theme_minimal()
# Daftar pasangan nama kolom lama dan baru
new_colnames <- c("Provinsi" = "provinsi",
"Sekolah" = "sekolah",
"Siswa" = "siswa",
"Mengulang" = "mengulang",
"Putus.Sekolah" = "putus_sekolah",
"Kepala.Sekolah.&.Guru" = "kepsek_dan_guru",
"Tenaga.Kependidikan" = "tendik",
"Rombel" = "rombongan_belajar",
"Ruang.Kelas" = "ruang_kelas",
"Status" = "status",
"Tahun" = "tahun",
"Rasio.Guru.Siswa" = "rasio_guru_siswa",
"Kategori" = "kategori"
)
# Mengganti nama kolom
colnames(sekolah_data) = new_colnames[colnames(sekolah_data)]
head(sekolah_data)
# Mengecek apakah ada data duplikat
duplikat = sum(duplicated(sekolah_data))
cat("Jumlah data duplikat : ", sum(duplikat), "\n")
# Menghapus data duplikat
data = sekolah_data[!duplikat,]
cat("Data seteleah menghapus duplikat: ", nrow(data), "baris\n\n")
# Mengecek data hilang
data_hilang = colSums(is.na(sekolah_data))
cat("Jumlah data hilang disetiap kolom : \n")
print(data_hilang)
# Menghapus baris dengan data hilang
data = na.omit(sekolah_data)
cat("Data setelah menghapus data hilang:", nrow(data), "baris\n\n")
# Spliting data
set.seed(420)
split = initial_split(data, prop = 0.8, strata = kategori) #di split 80% data training dan 20% data testing
data_train = split %>% training()
data_test = split %>% testing()
model = multinom(
kategori ~ siswa + sekolah + kepsek_dan_guru + tendik +
rombongan_belajar + ruang_kelas + status,
data = data_train,
maxit = 8
)
# Import library evaluasi
library(Metrics)
# Menambahkan prediksi ke dataset uji
data_test <- data_test %>%
mutate(predicted_category = predict(model, ., type = "class"))
# Visualisasi distribusi prediksi
ggplot(data_test, aes(x = predicted_category, fill = predicted_category)) +
geom_bar() +
labs(title = "Distribusi Prediksi Kategori Rasio Guru-Siswa",
x = "Kategori Prediksi",
y = "Jumlah",
fill = "Kategori") +
theme_minimal()
# Import library untuk Decision Tree
library(rpart)
library(rpart.plot)
# Pastikan target variable adalah faktor
data_train <- data_train %>%
mutate(kategori_provinsi = factor(kategori))
# Membuat model Decision Tree
dt_model <- rpart(kategori_provinsi ~ siswa + sekolah + kepsek_dan_guru + tendik +
rombongan_belajar + ruang_kelas + status,
data = data_train, method = "class")
# Visualisasi Decision Tree
rpart.plot(dt_model, type = 4, extra = 101, main = "Decision Tree untuk Kategori Provinsi")
# Visualisasi hasil prediksi
ggplot(data_test, aes(x = rasio_guru_siswa, fill = predicted_category)) +
geom_histogram(binwidth = 1, position = "dodge") +
labs(title = "Distribusi Prediksi Rasio Guru-Siswa dengan Decision Tree",
x = "Rasio Guru-Siswa", y = "Frekuensi") +
theme_minimal()
# Melakukan testing pada Multinom Regression
predictions = predict(model, data_test)
# Melakukan evaluasi
conf_matrix = confusionMatrix(
as.factor(predictions), as.factor(data_test$kategori)
)
conf_matrix
# Melakukan testing pada Decision Tree
# Prediksi pada data uji
data_test <- data_test %>%
mutate(kategori_provinsi = factor(kategori))
# Prediksi pada data uji
pred_dt <- predict(dt_model, data_test, type = "class")
# Melakukan evaluasi
conf_matrix = confusionMatrix(
as.factor(pred_dt), as.factor(data_test$kategori_provinsi)
)
conf_matrix
# Menambahkan prediksi dari model Decision Tree ke data uji
data_test <- data_test %>%
mutate(pred_dt = predict(dt_model, ., type = "class"))
# Visualisasi perbandingan distribusi prediksi kedua model
ggplot(data_test, aes(x = predicted_category, fill = "Multinomial Regression")) +
geom_bar(alpha = 0.6, position = "dodge") +
geom_bar(aes(x = pred_dt, fill = "Decision Tree"), alpha = 0.6, position = "dodge") +
labs(title = "Perbandingan Distribusi Prediksi Kategori",
x = "Kategori Prediksi",
y = "Jumlah",
fill = "Model") +
theme_minimal()
#----------------------------------------------------------------------------------------------------#
### Opsi Visualisasi dengan headmap
#----------------------------------------------------------------------------------------------------#
# Membuat confusion matrix
conf_matrix_multinom <- table(Predicted = data_test$predicted_category, Actual = data_test$kategori)
conf_matrix_dt <- table(Predicted = data_test$pred_dt, Actual = data_test$kategori)
# Heatmap untuk Multinomial Regression
heatmap_multinom <- as.data.frame(as.table(conf_matrix_multinom))
ggplot(heatmap_multinom, aes(x = Actual, y = Predicted, fill = Freq)) +
geom_tile() +
geom_text(aes(label = Freq), color = "white") +
scale_fill_gradient(low = "blue", high = "red") +
labs(title = "Heatmap Confusion Matrix (Multinomial Regression)",
x = "Kategori Aktual", y = "Kategori Prediksi") +
theme_minimal()
# Heatmap untuk Decision Tree
heatmap_dt <- as.data.frame(as.table(conf_matrix_dt))
ggplot(heatmap_dt, aes(x = Actual, y = Predicted, fill = Freq)) +
geom_tile() +
geom_text(aes(label = Freq), color = "white") +
scale_fill_gradient(low = "blue", high = "red") +
labs(title = "Heatmap Confusion Matrix (Decision Tree)",
x = "Kategori Aktual", y = "Kategori Prediksi") +
theme_minimal()
# Library Shiny
library(shiny)
# Interface Shiny
ui <- fluidPage(
titlePanel("Prediksi Rasio Guru-Siswa Berdasarkan Inputan"),
sidebarLayout(
sidebarPanel(
numericInput("siswa", "Jumlah Siswa:", min = 1, value = 100),
numericInput("sekolah", "Jumlah Sekolah:", min = 1, value = 10),
numericInput("kepsek_dan_guru", "Jumlah Kepala Sekolah & Guru:", min = 1, value = 5),
numericInput("tendik", "Jumlah Tenaga Kependidikan:", min = 0, value = 2),
numericInput("rombongan_belajar", "Jumlah Rombongan Belajar:", min = 1, value = 3),
numericInput("ruang_kelas", "Jumlah Ruang Kelas:", min = 1, value = 3),
selectInput("status", "Status Sekolah:", choices = c("Negeri", "Swasta")),
actionButton("predict", "Lakukan Prediksi")
),
mainPanel(
h3("Hasil Prediksi:"),
verbatimTextOutput("hasil_multinom"),
verbatimTextOutput("hasil_decision_tree")
)
)
)
# Server Shiny
server <- function(input, output) {
observeEvent(input$predict, {
# Data baru dari inputan pengguna
data_baru <- data.frame(
siswa = input$siswa,
sekolah = input$sekolah,
kepsek_dan_guru = input$kepsek_dan_guru,
tendik = input$tendik,
rombongan_belajar = input$rombongan_belajar,
ruang_kelas = input$ruang_kelas,
status = input$status
)
# Prediksi menggunakan model Multinom
pred_multinom <- predict(model, newdata = data_baru, type = "class")
# Prediksi menggunakan model Decision Tree
pred_decision_tree <- predict(dt_model, newdata = data_baru, type = "class")
# Menampilkan hasil prediksi
output$hasil_multinom <- renderText({
paste("Prediksi (Multinom Regression):", pred_multinom)
})
output$hasil_decision_tree <- renderText({
paste("Prediksi (Decision Tree):", pred_decision_tree)
})
})
}
# Menjalankan Shiny App
shinyApp(ui, server)
